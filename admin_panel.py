from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import Database
from keyboard_menu import kb_admin, kb_statuses, kb_menu
from dotenv import load_dotenv
import os

load_dotenv()
db = Database()

class AdminStates(StatesGroup):
    waiting_password = State()
    waiting_user_id = State()
    waiting_new_status = State()
    waiting_price_action = State()
    waiting_new_price = State()
    waiting_custom_price = State()

async def get_standard_prices():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã"""
    prices = db.get_prices()
    return {p['size']: p['price'] for p in prices if not p['is_custom']}

async def get_custom_price():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∑–∞ –º¬≤ –∏–∑ –±–∞–∑—ã"""
    prices = db.get_prices()
    for p in prices:
        if p['is_custom']:
            return p['price']
    return 396

async def admin_login(message: types.Message):
    await AdminStates.waiting_password.set()
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                         reply_markup=types.ReplyKeyboardRemove())

async def process_admin_password(message: types.Message, state: FSMContext):
    if message.text == os.getenv('ADMIN_PASSWORD'):
        await state.finish()
        await message.answer("üë®‚Äçüíª –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                             reply_markup=kb_admin)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel")

async def price_settings(message: types.Message):
    await AdminStates.waiting_price_action.set()
    standard_prices = await get_standard_prices()

    kb_sizes = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for size in standard_prices.keys():
        kb_sizes.add(types.KeyboardButton(text=size))
    kb_sizes.add(types.KeyboardButton(text="–¶–µ–Ω–∞ –∑–∞ –º¬≤"))
    kb_sizes.add(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))

    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:",
        reply_markup=kb_sizes
    )

async def process_price_action(message: types.Message, state: FSMContext):
    standard_prices = await get_standard_prices()

    if message.text in standard_prices:
        async with state.proxy() as data:
            data['size'] = message.text
            data['is_custom'] = False

        await AdminStates.waiting_new_price.set()
        await message.answer(
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è {message.text}: {standard_prices[message.text]} —Ä—É–±\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    elif message.text == "–¶–µ–Ω–∞ –∑–∞ –º¬≤":
        custom_price = await get_custom_price()
        await AdminStates.waiting_custom_price.set()
        await message.answer(
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤: {custom_price} —Ä—É–±\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    elif message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

async def process_new_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError

        async with state.proxy() as data:
            size = data['size']
            is_custom = data.get('is_custom', False)

        success = db.update_price(size, price, is_custom)

        if success:
            await message.answer(
                f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ {size} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price} —Ä—É–±",
                reply_markup=kb_admin
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=kb_admin)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
    finally:
        await state.finish()

async def process_custom_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError

        if db.update_price('custom', price, is_custom=True):
            await message.answer(
                f"‚úÖ –¶–µ–Ω–∞ –∑–∞ –º¬≤ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price} —Ä—É–±",
                reply_markup=kb_admin
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=kb_admin)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
    finally:
        await state.finish()

async def exit_admin_panel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", reply_markup=kb_menu)

async def change_order_status_start(message: types.Message):
    await AdminStates.waiting_user_id.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=types.ReplyKeyboardRemove())

async def process_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        async with state.proxy() as data:
            data['user_id'] = user_id
        await AdminStates.next()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=kb_statuses)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")

async def process_new_status(message: types.Message, state: FSMContext):
    statuses = ["–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", "–í—ã–ø–æ–ª–Ω–µ–Ω", "–û—Ç–º–µ–Ω–µ–Ω"]
    if message.text not in statuses:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    async with state.proxy() as data:
        user_id = data['user_id']

    if db.update_order_status(user_id, message.text):
        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {message.text}",
                             reply_markup=kb_admin)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", reply_markup=kb_admin)

    await state.finish()