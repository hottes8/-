from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import Database
from keyboard_menu import kb_admin, kb_statuses, kb_menu
from dotenv import load_dotenv
import os

load_dotenv()
db = Database()

class AdminStates(StatesGroup):
    waiting_password = State()
    waiting_user_id = State()
    waiting_new_status = State()

ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')

async def admin_login(message: types.Message):
    await AdminStates.waiting_password.set()
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                         reply_markup=types.ReplyKeyboardRemove())

async def process_admin_password(message: types.Message, state: FSMContext):
    if message.text == ADMIN_PASSWORD:
        await state.finish()
        await message.answer("üë®‚Äçüíª –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                             reply_markup=kb_admin)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel")

async def exit_admin_panel(message: types.Message):
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                         reply_markup=kb_menu)

async def change_order_status_start(message: types.Message):
    await AdminStates.waiting_user_id.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                         reply_markup=types.ReplyKeyboardRemove())

async def process_user_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    async with state.proxy() as data:
        data['user_id'] = message.text

    await AdminStates.next()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
                         reply_markup=kb_statuses)

async def process_new_status(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = data['user_id']
        new_status = message.text

    if db.update_order_status(user_id, new_status):
        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'",
                             reply_markup=kb_admin)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                             reply_markup=kb_admin)

    await state.finish()