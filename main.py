from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import config
from keyboard_menu import kb_menu, kb_size
from database import *
import re
import requests
import os
from aiogram import Bot, Dispatcher, types

os.makedirs('photos', exist_ok=True)

db = Database()
print(db.connect())

bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database()


async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')


class Form(StatesGroup):
    fio = State()
    email = State()
    phone = State()
    photo = State()
    size = State()


@dp.message_handler(commands=['start'])  # –†–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω
async def cool_command(message: types.Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –∑–∞–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤, –≤ –ø–æ—è–≤–∏–≤—à–µ–µ–º—Å—è –Ω–∏–∂–µ –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥.",
        reply_markup=kb_menu)


@dp.message_handler(text=['–û –Ω–∞—Å'])
async def cool_command(message: types.Message):
    await message.answer('''–û –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–ü–µ4–∞—Ç–Ω–∏–∫–æ–≤–™¬ª

    –ï—Å–ª–∏ –í—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —Ç–æ–º, —á—Ç–æ–±—ã , –¥–∞–≤ —Ä–µ–∫–ª–∞–º—É, –∑–∞—è–≤–∏—Ç—å –æ —Å–µ–±–µ, –ø—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –Ω–æ–≤—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –¥–∞—Ç—å –º–æ—â–Ω—ã–π —Ç–æ–ª—á–æ–∫ —Å–≤–æ–µ–º—É –±–∏–∑–Ω–µ—Å—É, —Ç–æ –í—ã —Ç–æ—á–Ω–æ —è–≤–ª—è–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∑–∞–∫–∞–∑—á–∏–∫–æ–º. –ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–¥–∞—Ö —Ä–µ–∫–ª–∞–º—ã, —Ä–µ–∞–ª–∏–∑—É—è —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞ –ø–æ –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –Ω–∏–∑–∫–∏—Ö —Ü–µ–Ω –≤ –†–æ—Å—Å–∏–∏.

    –£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –∏ –±–∏–∑–Ω–µ—Å-—Å—É–≤–µ–Ω–∏—Ä—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ª—é–±–æ–≥–æ –æ–±—ä–µ–º–∞: –ª–∏—Å—Ç–æ–≤–∫–∏, –ø–ª–∞–∫–∞—Ç—ã, –±—É–∫–ª–µ—Ç—ã, –∫–∞—Ç–∞–ª–æ–≥–∏, –∞—Ñ–∏—à–∏, –ø–∞–ø–∫–∏, –ø—Ä–∞–π—Å—ã, –∫–∞–ª–µ–Ω–¥–∞—Ä–∏, –∫–æ–Ω–≤–µ—Ä—Ç—ã, –ø–∞–∫–µ—Ç—ã, –∫—Ä–∞—Ñ—Ç-–ø–∞–∫–µ—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.

    –ú—ã –∏–º–µ–µ–º –±–æ–ª—å—à–æ–π –æ–ø—ã—Ç –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ –Ω–∞—Ä—É–∂–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã: —Ç–∞–±–ª–∏—á–∫–∏, —à—Ç–µ–Ω–¥–µ—Ä—ã, –≤—ã–≤–µ—Å–∫–∏, –æ–±—ä–µ–º–Ω—ã–µ –±—É–∫–≤—ã, –±–∞–Ω–Ω–µ—Ä—ã, —Ä–∞—Å—Ç—è–∂–∫–∏, —Å—Ç–µ–Ω–¥—ã, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∏—Ç—Ä–∏–Ω, —Å–≤–µ—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∞, –ø—Ä–µ—Å—Å-–≤–æ–ª–ª—ã.

    –ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö –≤–∏–¥–∞—Ö —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π: –º–∞–π–∫–∏, –∫—É—Ä—Ç–∫–∏, —Ñ—É—Ç–±–æ–ª–∫–∏, –±–µ–π—Å–±–æ–ª–∫–∏, –ª–µ–Ω—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.
                         ''')


@dp.message_handler(text=['–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'])
async def cmd_start(message: types.Message):
    await Form.fio.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")


@dp.message_handler(text=['–û—Ç–º–µ–Ω–∞'], state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.answer("‚ùå –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=kb_menu)


@dp.message_handler(state=Form.fio)
async def process_fio(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['fio'] = message.text
    await Form.next()
    await message.answer("–ó–∞–ø–æ–º–Ω–∏–ª! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")


@dp.message_handler(state=Form.email)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text.strip().lower()

    if not re.fullmatch(r'^[\w.-]+@([\w-]+\.)+(ru|com)$', email):
        await message.answer(
            "‚ùå Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n"
            "‚Ä¢ –°–∏–º–≤–æ–ª @\n"
            "‚Ä¢ –î–æ–º–µ–Ω, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π—Å—è –Ω–∞ .ru –∏–ª–∏ .com\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö email:</b>\n"
            "‚Ä¢ ivanov@gmail.com\n"
            "‚Ä¢ petrov@yandex.ru\n"
            "‚Ä¢ sidorov@sub.domain.com\n"
            "‚Ä¢ test-2024@my-site.ru",
            parse_mode="HTML"
        )
        return

    async with state.proxy() as data:
        data['email'] = email

    await Form.next()
    await message.answer("‚úÖ Email –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.text

    cleaned_number = re.sub(r'[^\d+]', '', phone_number)

    mobile_pattern = r'''
        ^                # –ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
        (\+7\d{10}       # +7 –∏ 10 —Ü–∏—Ñ—Ä (12 —Å–∏–º–≤–æ–ª–æ–≤)
        |8\d{10}         # 8 –∏ 10 —Ü–∏—Ñ—Ä (11 —Å–∏–º–≤–æ–ª–æ–≤)
        |9\d{9})$        # 9 –∏ 9 —Ü–∏—Ñ—Ä (10 —Å–∏–º–≤–æ–ª–æ–≤)
    '''.strip()

    if not re.fullmatch(mobile_pattern, cleaned_number, re.VERBOSE):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **–º–æ–±–∏–ª—å–Ω—ã–π** –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
            "‚Ä¢ –í —Ñ–æ—Ä–º–∞—Ç–µ `+7XXXXXXXXXX` (11 —Ü–∏—Ñ—Ä)\n"
            "‚Ä¢ –ò–ª–∏ `8XXXXXXXXXX` (11 —Ü–∏—Ñ—Ä)\n"
            "‚Ä¢ –ò–ª–∏ `9XXXXXXXXX` (10 —Ü–∏—Ñ—Ä)\n\n"
            "_–ü—Ä–∏–º–µ—Ä—ã: +79161234567, 89161234567, 9131234567_",
            parse_mode="Markdown"
        )
        return

    async with state.proxy() as data:
        data['phone'] = cleaned_number

    await Form.next()
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:")


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.photo)
async def process_photo(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo = message.photo[-1]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file = await bot.get_file(photo.file_id)
        file_url = f"https://api.telegram.org/file/bot{config.TOKEN}/{file.file_path}"

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        response = requests.get(file_url)
        if response.status_code == 200:
            filename = f"photos/{photo.file_id}.jpg"
            with open(filename, "wb") as f:
                f.write(response.content)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
            async with state.proxy() as data:
                data['photo_id'] = photo.file_id  # telegram file_id
                data['photo_url'] = file_url  # –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞
                data['local_path'] = filename  # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å

            await Form.next()
            await message.answer("üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∞–Ω–Ω–µ—Ä–∞:", reply_markup=kb_size)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@dp.callback_query_handler(lambda c: c.data.startswith('size_'), state=Form.size)
async def process_size(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    size_type = callback_query.data.split('_')[1]

    if size_type == "custom":
        await bot.send_message(callback_query.from_user.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2x3 –º):")
        return

    size = f"{size_type.replace('x', 'x')} –º"

    async with state.proxy() as data:
        data['size'] = size

    user_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    db.save_user(
        callback_query.from_user.id,
        user_data['fio'],
        user_data['email'],
        user_data['phone'],
        user_data['photo_id'],
        user_data['photo_url'],
        user_data['local_path'],
        user_data['size']
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    await bot.send_photo(
        chat_id=callback_query.from_user.id,
        photo=user_data['photo_id'],
        caption=f"""
        üìã <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>

        üë§ <b>–§–ò–û:</b> {user_data['fio']}
        üìß <b>Email:</b> {user_data['email']}
        üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data['phone']}
        üìè <b>–†–∞–∑–º–µ—Ä –±–∞–Ω–Ω–µ—Ä–∞:</b> {user_data['size']}

        üñº <i>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –º–∞–∫–µ—Ç–∞</i>
        """,
        parse_mode="HTML",
        reply_markup=kb_menu
    )

    await state.finish()


@dp.message_handler(state=Form.size)
async def process_custom_size(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['size'] = message.text

    user_data = await state.get_data()
    success = db.save_user(
        message.from_user.id,
        user_data['fio'],
        user_data['email'],
        user_data['phone'],
        user_data['photo_id'],
        user_data['photo_url'],
        user_data['local_path'],
        user_data['size']
    )

    if success:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        await message.answer_photo(
            photo=user_data['photo_id'],
            caption=f"""
                üìã <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>

                üë§ <b>–§–ò–û:</b> {user_data['fio']}
                üìß <b>Email:</b> {user_data['email']}
                üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data['phone']}
                üìè <b>–†–∞–∑–º–µ—Ä –±–∞–Ω–Ω–µ—Ä–∞:</b> {user_data['size']}

                üñº <i>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –º–∞–∫–µ—Ç–∞</i>
                """,
            parse_mode="HTML",
            reply_markup=kb_menu
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", reply_markup=kb_menu)

    await state.finish()


@dp.message_handler(state=Form.size)
async def process_custom_size(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['size'] = message.text

    user_data = await state.get_data()
    success = db.save_user(
        message.from_user.id,
        user_data['fio'],
        user_data['email'],
        user_data['phone'],
        user_data['photo_id'],
        user_data['size']
    )

    if success:
        await message.answer(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—Ä: {message.text}\n–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.",
            reply_markup=kb_menu
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", reply_markup=kb_menu)

    await state.finish()


@dp.message_handler(state=Form.photo, content_types=types.ContentTypes.ANY)
async def invalid_content(message: types.Message):
    await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")


@dp.message_handler(content_types=types.ContentTypes.ANY)
async def unknown_command(message: types.Message):
    if message.content_type != '–û—Ç–º–µ–Ω–∞' or 'start' or '–û –Ω–∞—Å' or '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑':
        await message.reply("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start")
    else:
        await message.reply("‚ùå –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)